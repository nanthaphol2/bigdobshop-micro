// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: modules/cart/cartPb/cartPb.proto

package bigdobshop_micro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartGrpcServiceClient is the client API for CartGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartGrpcServiceClient interface {
	FindCartsInIds(ctx context.Context, in *FindCartsInIdsReq, opts ...grpc.CallOption) (*FindCartsInIdsRes, error)
}

type cartGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartGrpcServiceClient(cc grpc.ClientConnInterface) CartGrpcServiceClient {
	return &cartGrpcServiceClient{cc}
}

func (c *cartGrpcServiceClient) FindCartsInIds(ctx context.Context, in *FindCartsInIdsReq, opts ...grpc.CallOption) (*FindCartsInIdsRes, error) {
	out := new(FindCartsInIdsRes)
	err := c.cc.Invoke(ctx, "/CartGrpcService/FindCartsInIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartGrpcServiceServer is the server API for CartGrpcService service.
// All implementations must embed UnimplementedCartGrpcServiceServer
// for forward compatibility
type CartGrpcServiceServer interface {
	FindCartsInIds(context.Context, *FindCartsInIdsReq) (*FindCartsInIdsRes, error)
	mustEmbedUnimplementedCartGrpcServiceServer()
}

// UnimplementedCartGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartGrpcServiceServer struct {
}

func (UnimplementedCartGrpcServiceServer) FindCartsInIds(context.Context, *FindCartsInIdsReq) (*FindCartsInIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCartsInIds not implemented")
}
func (UnimplementedCartGrpcServiceServer) mustEmbedUnimplementedCartGrpcServiceServer() {}

// UnsafeCartGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartGrpcServiceServer will
// result in compilation errors.
type UnsafeCartGrpcServiceServer interface {
	mustEmbedUnimplementedCartGrpcServiceServer()
}

func RegisterCartGrpcServiceServer(s grpc.ServiceRegistrar, srv CartGrpcServiceServer) {
	s.RegisterService(&CartGrpcService_ServiceDesc, srv)
}

func _CartGrpcService_FindCartsInIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCartsInIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartGrpcServiceServer).FindCartsInIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CartGrpcService/FindCartsInIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartGrpcServiceServer).FindCartsInIds(ctx, req.(*FindCartsInIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CartGrpcService_ServiceDesc is the grpc.ServiceDesc for CartGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CartGrpcService",
	HandlerType: (*CartGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindCartsInIds",
			Handler:    _CartGrpcService_FindCartsInIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/cart/cartPb/cartPb.proto",
}
